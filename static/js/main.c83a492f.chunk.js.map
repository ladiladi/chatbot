{"version":3,"sources":["ActionProvider.js","MessageParser.js","components/InformationOptions/informationOptions.jsx","components/LinkList/LinkList.jsx","config.js","App.js","serviceWorker.js","index.js"],"names":["ActionProvider","createChatBotMessage","setStateFunc","handleProjects","message","widget","updateChatbotState","handleWorkExperience","handleContact","handleCourses","handlePersonal","this","setState","greetingMessage","prevState","messages","MessageParser","actionProvider","state","lowerCaseMessage","toLowerCase","includes","greet","informationOptions","props","optionsMarkup","text","handler","id","map","option","className","key","onClick","LinkList","linkMarkup","options","link","href","url","target","rel","config","botName","initialMessages","customStyles","botMessageBox","backgroundColor","chatButton","widgets","widgetName","widgetFunc","App","messageParser","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.c83a492f.chunk.js","sourcesContent":["class ActionProvider {\r\n    constructor(createChatBotMessage, setStateFunc) {\r\n      this.createChatBotMessage = createChatBotMessage;\r\n      this.setState = setStateFunc;\r\n    }\r\n\r\n    greet() {\r\n        const greetingMessage = this.createChatBotMessage(\"Hello there.\");\r\n        this.updateChatbotState(greetingMessage)\r\n    }\r\n\r\n    handleProjects = () => {\r\n        const message = this.createChatBotMessage(\r\n          \"Here are some of my projects:\",\r\n          {\r\n            widget: \"projectLinks\",\r\n          }\r\n        );\r\n    \r\n        this.updateChatbotState(message);\r\n    };\r\n    handleWorkExperience = () => {\r\n      const message = this.createChatBotMessage(\r\n        \"I am currently working at Enfo Service Desk. I have worked there for three years. More about Enfo's services: https://www.enfogroup.com/\"\r\n      );\r\n      this.updateChatbotState(message);\r\n    }\r\n    handleContact = () => {\r\n      const message = this.createChatBotMessage(\r\n        \"Here are my contact information:\",\r\n        {\r\n          widget: \"contactLinks\",\r\n        }\r\n      );\r\n      this.updateChatbotState(message);\r\n    }\r\n    handleCourses = () => {\r\n      const message = this.createChatBotMessage(\r\n        \"My completed studies include topics like Software Engineering, Artificial Intelligence, User-Centered Design and Smart Learning Environments.\"\r\n      );\r\n      this.updateChatbotState(message);\r\n    }\r\n\r\n    handlePersonal = () => {\r\n      const message = this.createChatBotMessage(\r\n        \"I have two cats with my wife and I enjoy sports, especially martial arts.\"\r\n      );\r\n      this.updateChatbotState(message);\r\n    }\r\n\r\n    updateChatbotState(message) {\r\n        this.setState(prevState => ({\r\n            ...prevState, messages: [...prevState.messages, message]\r\n        }))\r\n    }\r\n}\r\n\r\nexport default ActionProvider;\r\n","class MessageParser {\r\n    constructor(actionProvider, state) {\r\n      this.actionProvider = actionProvider;\r\n    }\r\n  \r\n    parse(message) {\r\n        const lowerCaseMessage = message.toLowerCase();\r\n\r\n        if (lowerCaseMessage.includes(\"hello\")) {\r\n            this.actionProvider.greet();\r\n        }\r\n\r\n        if (lowerCaseMessage.includes(\"projects\")) {\r\n            this.actionProvider.handleProjects();\r\n        }\r\n\r\n        if (lowerCaseMessage.includes(\"contact\")) {\r\n            this.actionProvider.handleContact();\r\n        }\r\n\r\n        if (lowerCaseMessage.includes(\"courses\")) {\r\n            this.actionProvider.handleCourses();\r\n        }\r\n\r\n        if (lowerCaseMessage.includes(\"about\") || lowerCaseMessage.includes(\"more\")) {\r\n            this.actionProvider.handlePersonal();\r\n        }\r\n    }\r\n}\r\n\r\nexport default MessageParser;\r\n\r\n  ","import React from \"react\";\r\n\r\nimport \"./informationOptions.css\";\r\n\r\nconst informationOptions = (props) => {\r\n    const options = [\r\n      { text: \"Projects\", handler: props.actionProvider.handleProjects, id: 1 },\r\n      { text: \"Work experience\", handler: props.actionProvider.handleWorkExperience, id: 2 },\r\n      { text: \"Contact information\", handler: props.actionProvider.handleContact, id: 3 },\r\n      { text: \"Courses taken\", handler: props.actionProvider.handleCourses, id: 4 },\r\n      { text: \"More about Tony\", handler: props.actionProvider.handlePersonal, id: 5 },\r\n    ];\r\n  \r\n    const optionsMarkup = options.map((option) => (\r\n      <button\r\n        className=\"learning-option-button\"\r\n        key={option.id}\r\n        onClick={option.handler}\r\n      >\r\n        {option.text}\r\n      </button>\r\n    ));\r\n  \r\n    return <div className=\"learning-options-container\">{optionsMarkup}</div>;\r\n};\r\n  \r\nexport default informationOptions;","import React from \"react\";\r\n\r\nimport \"./LinkList.css\";\r\n\r\n\r\nconst LinkList = (props) => {\r\n    const linkMarkup = props.options.map((link) => (\r\n      <li key={link.id} className=\"link-list-item\">\r\n        <a\r\n          href={link.url}\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n          className=\"link-list-item-url\"\r\n        >\r\n          {link.text}\r\n        </a>\r\n      </li>\r\n    ));\r\n  \r\n    return <ul className=\"link-list\">{linkMarkup}</ul>;\r\n};\r\n  \r\nexport default LinkList;","import React from \"react\";\r\nimport { createChatBotMessage } from \"react-chatbot-kit\";\r\n\r\nimport InformationOptions from \"./components/InformationOptions/informationOptions\";\r\nimport LinkList from \"./components/LinkList/LinkList\";\r\n\r\nconst config = {\r\n    botName: \"InfoBot\",\r\n    initialMessages: [\r\n        createChatBotMessage(\"Hi, I'm here to help. What do you want to know?\", {\r\n        widget: \"informationOptions\",\r\n    }),\r\n    ],\r\n    customStyles: {\r\n        botMessageBox: {\r\n            backgroundColor: \"#376B7E\",\r\n        },\r\n        chatButton: {\r\n            backgroundColor: \"#376B7E\",\r\n        },\r\n    },\r\n    widgets: [\r\n        {\r\n            widgetName: \"informationOptions\",\r\n            widgetFunc: (props) => <InformationOptions {...props} />,\r\n        },\r\n        {\r\n            widgetName: \"projectLinks\",\r\n            widgetFunc: (props) => <LinkList {...props} />,\r\n            props: {\r\n                options: [\r\n                    {\r\n                        text: \"React Recipe App\",\r\n                        url: \"https://ladiladi.github.io/react-recipe-app/\",\r\n                        id: 1,\r\n                    },\r\n                    {\r\n                        text: \"React Quiz App\",\r\n                        url: \"https://ladiladi.github.io/react-quiz-app/\",\r\n                        id: 2,\r\n                    },\r\n                    {\r\n                        text: \"Shopping cart\",\r\n                        url: \"https://ladiladi.github.io/js-shopping-cart/\",\r\n                        id: 3,\r\n                    },\r\n                ]\r\n            }\r\n        },\r\n        {\r\n            widgetName: \"contactLinks\",\r\n            widgetFunc: (props) => <LinkList {...props} />,\r\n            props: {\r\n                options: [\r\n                    {\r\n                        text: \"Email\",\r\n                        url: \"mailto:tony.valkama@outlook.com\",\r\n                        id: 1,  \r\n                    },\r\n                    {\r\n                        text: \"LinkedIn\",\r\n                        url: \"https://linkedin.com/in/tony-v-55887b88\",\r\n                        id: 2,  \r\n                    },\r\n                    {\r\n                        text: \"GitHub\",\r\n                        url: \"https://github.com/ladiladi\",\r\n                        id: 3,  \r\n                    },\r\n                ]\r\n            }\r\n        },\r\n\r\n    ],\r\n}\r\n\r\nexport default config;","import React from 'react';\nimport './App.css';\nimport Chatbot from 'react-chatbot-kit';\n\nimport ActionProvider from './ActionProvider';\nimport MessageParser from './MessageParser';\nimport config from './config';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Chatbot config={config} actionProvider={ActionProvider} messageParser={MessageParser}/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}